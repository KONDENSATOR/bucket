// Generated by CoffeeScript 1.7.1
(function() {
  var Branch, Bucket, f;

  Branch = require('./branch');

  f = require("./functions");

  Bucket = (function() {
    function Bucket(path) {
      this.state = {
        path: path,
        children: {},
        err: function() {
          return this;
        },
        data: function() {
          return this;
        },
        stored: function() {
          return this;
        }
      };
    }

    Bucket.prototype.path = function() {
      return this.state.path;
    };

    Bucket.prototype.parent = function() {
      return this.state.parent;
    };

    Bucket.prototype.onerr = function(fn) {
      f.onerr(this, fn);
      return this;
    };

    Bucket.prototype.ondata = function(fn) {
      f.ondata(this, fn);
      return this;
    };

    Bucket.prototype.onstored = function(fn) {
      f.onstored(this, fn);
      return this;
    };

    Bucket.prototype.onoblited = function(fn) {
      f.onoblited(this, fn);
      return this;
    };

    Bucket.prototype.onlisted = function(fn) {
      f.onlisted(this, fn);
      return this;
    };

    Bucket.prototype.onclosed = function(fn) {
      f.onclosed(this, fn);
      return this;
    };

    Bucket.prototype.oblit = function() {
      return f.oblit(this);
    };

    Bucket.prototype.list = function() {
      return f.list(this);
    };

    Bucket.prototype.close = function() {
      return f.close(this);
    };

    Bucket.prototype.use = function(name) {
      var branch;
      if (name == null) {
        name = 'master';
      }
      branch = new Branch(this.state);
      branch.init(name, this);
      this.state.children[name] = branch;
      f.ensure(this.state.path, (function(_this) {
        return function(err) {
          if (err != null) {
            return _this.state.err(err);
          } else {
            return branch.load();
          }
        };
      })(this));
      return branch;
    };

    return Bucket;

  })();

  module.exports = Bucket;

}).call(this);
