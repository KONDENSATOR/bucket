// Generated by CoffeeScript 1.7.1
(function() {
  var changed, close, commit, discard, ensure, filename, fork, fs, inspect, load, merge, oblit, onclosed, ondata, onerr, onlisted, onoblited, onstored, path, readline, remove, set, store, util, _;

  path = require("path");

  fs = require("fs");

  readline = require("readline");

  _ = require("underscore");

  util = require("util");

  inspect = function(obj, value) {
    console.log(util.inspect(value, {
      colors: true,
      depth: null
    }));
    return obj;
  };

  set = function(obj, items) {
    var state;
    if (items != null) {
      state = obj.state;
      if (!_(items).isArray()) {
        items = [items];
      }
      _(items).each(function(item) {
        var present;
        if (item.id == null) {
          discard(obj);
          state.err("Bucket(" + state.branch + ") Transaction rollbacked - Error: Item contains no id: " + (util.inspect(item)));
          return;
        }
        present = state.dirty[item.id];
        if (!_(item).isEqual(present)) {
          state.dirty[item.id] = item;
          return state.changes[item.id] = item;
        }
      });
    }
    return obj;
  };

  remove = function(obj, ids) {
    var state;
    if (ids != null) {
      if (!_(ids).isArray()) {
        ids = [ids];
      }
      state = obj.state;
      _(ids).each(function(id) {
        delete state.dirty[id];
        return state.changes[id] = {
          id: id,
          deleted: true
        };
      });
    }
    return obj;
  };

  filename = function(obj) {
    var state;
    state = obj.state;
    return path.join(state.path, state.branch);
  };

  load = function(obj, fn) {
    var rl, state;
    state = obj.state;
    fs.closeSync(fs.openSync(filename(obj), 'a'));
    rl = readline.createInterface({
      input: fs.createReadStream(filename(obj)),
      output: process.stdout,
      terminal: false
    });
    rl.on("line", (function(_this) {
      return function(line) {
        var chunk;
        chunk = JSON.parse(line);
        return set(obj, chunk);
      };
    })(this));
    rl.on("close", (function(_this) {
      return function() {
        commit(obj);
        if (fn != null) {
          return fn(obj);
        } else {
          return state.data(obj);
        }
      };
    })(this));
    return obj;
  };

  oblit = function(obj) {
    var state;
    state = obj.state;
    return obj;
  };

  close = function(obj) {
    var state;
    state = obj.state;
    return obj;
  };

  fork = function(obj, name) {
    var state;
    state = obj.state;
    return obj;
  };

  merge = function(obj) {
    var state;
    state = obj.state;
    return obj;
  };

  changed = function(obj) {
    return _(obj.state.changes).keys().length > 0;
  };

  discard = function(obj) {
    var state;
    state = obj.state;
    state.dirty = _(state.commited).clone();
    state.changes = {};
    return obj;
  };

  commit = function(obj) {
    var state;
    state = obj.state;
    state.commited = _(state.dirty).clone();
    state.changes = {};
    return obj;
  };

  store = function(obj) {
    var state, transaction;
    state = obj.state;
    if (changed(obj)) {
      transaction = JSON.stringify(_(state.changes).values()) + "\n";
      fs.appendFile(filename(obj), transaction, {
        encoding: 'utf8'
      }, function(err) {
        if (err != null) {
          discard(obj);
          return state.err(("Bucket(" + this.state.branch + ") Transaction rollbacked - ") + err);
        } else {
          state.commited = state.dirty;
          state.changes = {};
          return state.stored(obj);
        }
      });
    }
    return obj;
  };

  ensure = function(filepath, fn) {
    var real;
    real = path.resolve(filepath);
    return fs.exists(real, function(exists) {
      if (exists) {
        return fn();
      } else {
        return fn("Path '" + real + "' does not exist");
      }
    });
  };

  onerr = function(obj, fn) {
    obj.state.err = fn;
    return this;
  };

  ondata = function(obj, fn) {
    obj.state.data = fn;
    return this;
  };

  onstored = function(obj, fn) {
    obj.state.stored = fn;
    return this;
  };

  onoblited = function(obj, fn) {
    obj.state.oblited = fn;
    return this;
  };

  onlisted = function(obj, fn) {
    obj.state.listed = fn;
    return this;
  };

  onclosed = function(obj, fn) {
    obj.state.closed = fn;
    return this;
  };

  module.exports = {
    inspect: inspect,
    set: set,
    remove: remove,
    filename: filename,
    load: load,
    oblit: oblit,
    close: close,
    fork: fork,
    merge: merge,
    changed: changed,
    discard: discard,
    commit: commit,
    store: store,
    ensure: ensure,
    onerr: onerr,
    ondata: ondata,
    onstored: onstored
  };

}).call(this);
