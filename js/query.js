// Generated by CoffeeScript 1.7.1
(function() {
  var Query, util, _,
    __slice = [].slice;

  _ = require('underscore');

  util = require('util');

  Query = (function() {
    function Query(branch) {
      this.branch = branch;
      this.subset = _(this.branch.state.dirty).chain();
    }

    Query.prototype.exec = function() {
      var args, name, _ref;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.subset = (_ref = this.subset)[name].apply(_ref, args);
      return this;
    };

    Query.prototype.reduce = function(fn, memo) {
      return exec('reduce', fn, memo);
    };

    Query.prototype.reduceRight = function(fn, memo) {
      return exec('reduceRight', fn, memo);
    };

    Query.prototype.map = function(fn) {
      return exec('map', fn);
    };

    Query.prototype.find = function(fn) {
      return exec('find', fn);
    };

    Query.prototype.filter = function(fn) {
      return exec('filter', fn);
    };

    Query.prototype.reject = function(fn) {
      return exec('reject', fn);
    };

    Query.prototype.every = function(fn) {
      return exec('every', fn);
    };

    Query.prototype.some = function(fn) {
      return exec('some', fn);
    };

    Query.prototype.max = function(fn) {
      return exec('max', fn);
    };

    Query.prototype.min = function(fn) {
      return exec('min', fn);
    };

    Query.prototype.sortBy = function(fn) {
      return exec('sortBy', fn);
    };

    Query.prototype.groupBy = function(fn) {
      return exec('groupBy', fn);
    };

    Query.prototype.indexBy = function(fn) {
      return exec('indexBy', fn);
    };

    Query.prototype.countBy = function(fn) {
      return exec('countBy', fn);
    };

    Query.prototype.size = function() {
      return exec('size');
    };

    Query.prototype.first = function(n) {
      return exec('first', n);
    };

    Query.prototype.initial = function(n) {
      return exec('initial', n);
    };

    Query.prototype.last = function(n) {
      return exec('last', n);
    };

    Query.prototype.rest = function(n) {
      return exec('rest', n);
    };

    Query.prototype.compact = function() {
      return exec('compact', fn);
    };

    Query.prototype.flatten = function(shallow) {
      return exec('flatten', shallow);
    };

    Query.prototype.uniq = function(isSorted, fn) {
      return exec('uniq', isSorted, fn);
    };

    Query.prototype.value = function() {
      return this.subset.value();
    };

    Query.prototype.set = function() {
      this.branch.set(this.subset.values().value());
      return this.branch;
    };

    Query.prototype.log = function() {
      console.log(util.inspect(this.subset.value(), {
        color: true,
        depth: null
      }));
      return this;
    };

    return Query;

  })();

  module.exports = Query;

}).call(this);
