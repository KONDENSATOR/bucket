// Generated by CoffeeScript 1.7.1
(function() {
  var Query, f, util, _,
    __slice = [].slice;

  _ = require('underscore');

  util = require('util');

  f = require('./functions');

  Query = (function() {
    function Query(branch) {
      this.branch = branch;
      this.subset = _(this.branch.state.dirty).chain();
    }

    Query.prototype.exec = function() {
      var args, name, _ref;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.subset = (_ref = this.subset)[name].apply(_ref, args);
      return this;
    };

    Query.prototype.reduce = function(fn, memo) {
      return this.exec('reduce', fn, memo);
    };

    Query.prototype.reduceRight = function(fn, memo) {
      return this.exec('reduceRight', fn, memo);
    };

    Query.prototype.map = function(fn) {
      return this.exec('map', fn);
    };

    Query.prototype.find = function(fn) {
      return this.exec('find', fn);
    };

    Query.prototype.filter = function(fn) {
      return this.exec('filter', fn);
    };

    Query.prototype.reject = function(fn) {
      return this.exec('reject', fn);
    };

    Query.prototype.every = function(fn) {
      return this.exec('every', fn);
    };

    Query.prototype.some = function(fn) {
      return this.exec('some', fn);
    };

    Query.prototype.max = function(fn) {
      return this.exec('max', fn);
    };

    Query.prototype.min = function(fn) {
      return this.exec('min', fn);
    };

    Query.prototype.sortBy = function(fn) {
      return this.exec('sortBy', fn);
    };

    Query.prototype.groupBy = function(fn) {
      return this.exec('groupBy', fn);
    };

    Query.prototype.indexBy = function(fn) {
      return this.exec('indexBy', fn);
    };

    Query.prototype.countBy = function(fn) {
      return this.exec('countBy', fn);
    };

    Query.prototype.size = function() {
      return this.exec('size');
    };

    Query.prototype.first = function(n) {
      return this.exec('first', n);
    };

    Query.prototype.initial = function(n) {
      return this.exec('initial', n);
    };

    Query.prototype.last = function(n) {
      return this.exec('last', n);
    };

    Query.prototype.rest = function(n) {
      return this.exec('rest', n);
    };

    Query.prototype.compact = function() {
      return this.exec('compact', fn);
    };

    Query.prototype.flatten = function(shallow) {
      return this.exec('flatten', shallow);
    };

    Query.prototype.uniq = function(isSorted, fn) {
      return this.exec('uniq', isSorted, fn);
    };

    Query.prototype.value = function() {
      return this.subset.value();
    };

    Query.prototype.set = function() {
      this.branch.set(this.subset.values().value());
      return this.branch;
    };

    Query.prototype.inspect = function() {
      return f.inspect(this, this.subset.value());
    };

    Query.prototype.lift = function(fn) {
      this.subset = _(fn(this.subset.value())).chain();
      return this;
    };

    return Query;

  })();

  module.exports = Query;

}).call(this);
